//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var User = newUserTable("user", "user", "")

type userTable struct {
	postgres.Table

	// Columns
	Idx       postgres.ColumnInteger
	ID        postgres.ColumnString
	Passwd    postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	Name      postgres.ColumnString
	Email     postgres.ColumnString
	Role      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserTable struct {
	userTable

	EXCLUDED userTable
}

// AS creates new UserTable with assigned alias
func (a UserTable) AS(alias string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTable with assigned schema name
func (a UserTable) FromSchema(schemaName string) *UserTable {
	return newUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTable with assigned table prefix
func (a UserTable) WithPrefix(prefix string) *UserTable {
	return newUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTable with assigned table suffix
func (a UserTable) WithSuffix(suffix string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTable(schemaName, tableName, alias string) *UserTable {
	return &UserTable{
		userTable: newUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newUserTableImpl("", "excluded", ""),
	}
}

func newUserTableImpl(schemaName, tableName, alias string) userTable {
	var (
		IdxColumn       = postgres.IntegerColumn("idx")
		IDColumn        = postgres.StringColumn("id")
		PasswdColumn    = postgres.StringColumn("passwd")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		NameColumn      = postgres.StringColumn("name")
		EmailColumn     = postgres.StringColumn("email")
		RoleColumn      = postgres.IntegerColumn("role")
		allColumns      = postgres.ColumnList{IdxColumn, IDColumn, PasswdColumn, CreatedAtColumn, UpdatedAtColumn, NameColumn, EmailColumn, RoleColumn}
		mutableColumns  = postgres.ColumnList{IDColumn, PasswdColumn, CreatedAtColumn, UpdatedAtColumn, NameColumn, EmailColumn, RoleColumn}
	)

	return userTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Idx:       IdxColumn,
		ID:        IDColumn,
		Passwd:    PasswdColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		Name:      NameColumn,
		Email:     EmailColumn,
		Role:      RoleColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
