//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Proof = newProofTable("proof", "proof", "")

type proofTable struct {
	postgres.Table

	// Columns
	Idx             postgres.ColumnInteger
	Category        postgres.ColumnString
	Description     postgres.ColumnString
	FirstImagePath  postgres.ColumnString
	SecondImagePath postgres.ColumnString
	LogPath         postgres.ColumnString
	CreatedUserIdx  postgres.ColumnInteger
	CreatedAt       postgres.ColumnTimestampz
	UpdatedUserIdx  postgres.ColumnInteger
	UpdatedAt       postgres.ColumnTimestampz
	UploadedUserIdx postgres.ColumnInteger
	UploadedAt      postgres.ColumnTimestampz
	Confirm         postgres.ColumnInteger
	Num             postgres.ColumnString
	TokenID         postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProofTable struct {
	proofTable

	EXCLUDED proofTable
}

// AS creates new ProofTable with assigned alias
func (a ProofTable) AS(alias string) *ProofTable {
	return newProofTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProofTable with assigned schema name
func (a ProofTable) FromSchema(schemaName string) *ProofTable {
	return newProofTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProofTable with assigned table prefix
func (a ProofTable) WithPrefix(prefix string) *ProofTable {
	return newProofTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProofTable with assigned table suffix
func (a ProofTable) WithSuffix(suffix string) *ProofTable {
	return newProofTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProofTable(schemaName, tableName, alias string) *ProofTable {
	return &ProofTable{
		proofTable: newProofTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newProofTableImpl("", "excluded", ""),
	}
}

func newProofTableImpl(schemaName, tableName, alias string) proofTable {
	var (
		IdxColumn             = postgres.IntegerColumn("idx")
		CategoryColumn        = postgres.StringColumn("category")
		DescriptionColumn     = postgres.StringColumn("description")
		FirstImagePathColumn  = postgres.StringColumn("first_image_path")
		SecondImagePathColumn = postgres.StringColumn("second_image_path")
		LogPathColumn         = postgres.StringColumn("log_path")
		CreatedUserIdxColumn  = postgres.IntegerColumn("created_user_idx")
		CreatedAtColumn       = postgres.TimestampzColumn("created_at")
		UpdatedUserIdxColumn  = postgres.IntegerColumn("updated_user_idx")
		UpdatedAtColumn       = postgres.TimestampzColumn("updated_at")
		UploadedUserIdxColumn = postgres.IntegerColumn("uploaded_user_idx")
		UploadedAtColumn      = postgres.TimestampzColumn("uploaded_at")
		ConfirmColumn         = postgres.IntegerColumn("confirm")
		NumColumn             = postgres.StringColumn("num")
		TokenIDColumn         = postgres.IntegerColumn("token_id")
		allColumns            = postgres.ColumnList{IdxColumn, CategoryColumn, DescriptionColumn, FirstImagePathColumn, SecondImagePathColumn, LogPathColumn, CreatedUserIdxColumn, CreatedAtColumn, UpdatedUserIdxColumn, UpdatedAtColumn, UploadedUserIdxColumn, UploadedAtColumn, ConfirmColumn, NumColumn, TokenIDColumn}
		mutableColumns        = postgres.ColumnList{IdxColumn, CategoryColumn, DescriptionColumn, FirstImagePathColumn, SecondImagePathColumn, LogPathColumn, CreatedUserIdxColumn, CreatedAtColumn, UpdatedUserIdxColumn, UpdatedAtColumn, UploadedUserIdxColumn, UploadedAtColumn, ConfirmColumn, NumColumn, TokenIDColumn}
	)

	return proofTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Idx:             IdxColumn,
		Category:        CategoryColumn,
		Description:     DescriptionColumn,
		FirstImagePath:  FirstImagePathColumn,
		SecondImagePath: SecondImagePathColumn,
		LogPath:         LogPathColumn,
		CreatedUserIdx:  CreatedUserIdxColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedUserIdx:  UpdatedUserIdxColumn,
		UpdatedAt:       UpdatedAtColumn,
		UploadedUserIdx: UploadedUserIdxColumn,
		UploadedAt:      UploadedAtColumn,
		Confirm:         ConfirmColumn,
		Num:             NumColumn,
		TokenID:         TokenIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
